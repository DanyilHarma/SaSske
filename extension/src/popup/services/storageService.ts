const defaultValues = {
    lastVisitedSite: null as string | null,
};

// –¢–∏–ø—ã –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π
type StorageKeys = keyof typeof defaultValues;
type StorageValues<K extends StorageKeys> = (typeof defaultValues)[K];

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
export const getStorageValue = <K extends StorageKeys>(
    key: K,
    callback: (value: StorageValues<K>) => void,
) => {
    chrome.storage.local.get([key], (result) => {
        callback((result[key] as StorageValues<K>) ?? defaultValues[key]);
    });
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
export const subscribeToStorageChanges = <K extends StorageKeys>(
    key: K,
    callback: (value: StorageValues<K>) => void,
) => {
    const listener = (changes: { [key: string]: chrome.storage.StorageChange }) => {
        if (changes[key]) {
            console.log(`üåç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${key}:`, changes[key].newValue);
            callback(changes[key].newValue as StorageValues<K>);
        }
    };
    chrome.storage.onChanged.addListener(listener);
    return () => {
        console.log(`üõë –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π ${key}`);
        chrome.storage.onChanged.removeListener(listener);
    };
};
